# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from shizen.models.base_model_ import Model
from shizen import util


class Plant(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, idx: int=None, common_name: str=None, scientific_name: str=None, label_name: str=None, description: str=None, image_url: str=None):  # noqa: E501
        """Plant - a model defined in Swagger

        :param idx: The idx of this Plant.  # noqa: E501
        :type idx: int
        :param common_name: The common_name of this Plant.  # noqa: E501
        :type common_name: str
        :param scientific_name: The scientific_name of this Plant.  # noqa: E501
        :type scientific_name: str
        :param label_name: The label_name of this Plant.  # noqa: E501
        :type label_name: str
        :param description: The description of this Plant.  # noqa: E501
        :type description: str
        :param image_url: The image_url of this Plant.  # noqa: E501
        :type image_url: str
        """
        self.swagger_types = {
            'idx': int,
            'common_name': str,
            'scientific_name': str,
            'label_name': str,
            'description': str,
            'image_url': str
        }

        self.attribute_map = {
            'idx': 'idx',
            'common_name': 'common_name',
            'scientific_name': 'scientific_name',
            'label_name': 'label_name',
            'description': 'description',
            'image_url': 'image_url'
        }
        self._idx = idx
        self._common_name = common_name
        self._scientific_name = scientific_name
        self._label_name = label_name
        self._description = description
        self._image_url = image_url

    @classmethod
    def from_dict(cls, dikt) -> 'Plant':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plant of this Plant.  # noqa: E501
        :rtype: Plant
        """
        return util.deserialize_model(dikt, cls)

    @property
    def idx(self) -> int:
        """Gets the idx of this Plant.


        :return: The idx of this Plant.
        :rtype: int
        """
        return self._idx

    @idx.setter
    def idx(self, idx: int):
        """Sets the idx of this Plant.


        :param idx: The idx of this Plant.
        :type idx: int
        """
        if idx is None:
            raise ValueError("Invalid value for `idx`, must not be `None`")  # noqa: E501

        self._idx = idx

    @property
    def common_name(self) -> str:
        """Gets the common_name of this Plant.


        :return: The common_name of this Plant.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name: str):
        """Sets the common_name of this Plant.


        :param common_name: The common_name of this Plant.
        :type common_name: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def scientific_name(self) -> str:
        """Gets the scientific_name of this Plant.


        :return: The scientific_name of this Plant.
        :rtype: str
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name: str):
        """Sets the scientific_name of this Plant.


        :param scientific_name: The scientific_name of this Plant.
        :type scientific_name: str
        """
        if scientific_name is None:
            raise ValueError("Invalid value for `scientific_name`, must not be `None`")  # noqa: E501

        self._scientific_name = scientific_name

    @property
    def label_name(self) -> str:
        """Gets the label_name of this Plant.


        :return: The label_name of this Plant.
        :rtype: str
        """
        return self._label_name

    @label_name.setter
    def label_name(self, label_name: str):
        """Sets the label_name of this Plant.


        :param label_name: The label_name of this Plant.
        :type label_name: str
        """
        if label_name is None:
            raise ValueError("Invalid value for `label_name`, must not be `None`")  # noqa: E501

        self._label_name = label_name

    @property
    def description(self) -> str:
        """Gets the description of this Plant.


        :return: The description of this Plant.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Plant.


        :param description: The description of this Plant.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def image_url(self) -> str:
        """Gets the image_url of this Plant.


        :return: The image_url of this Plant.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this Plant.


        :param image_url: The image_url of this Plant.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url
